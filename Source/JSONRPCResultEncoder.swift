//
//  JSONRPCResultEncoder.swift
//  Example
//
//  Created by Ronald "Danger" Mannak on 2/27/18.
//  Copyright Â© 2018 A Puzzle A Day. All rights reserved.
//

import CoreFoundation


/// A protocol for types which can be encoded to JSONRPC.
public protocol JSONRPCResultEncodable: Encodable {
    func jsonrpcEncode(to encoder: JSONRPCResultEncoder) throws
}

/// Provide a default implementation which calls through to `Encodable`. This
/// allows `JSONRPCEncodable` to use the `Encodable` implementation generated by the
/// compiler.
public extension JSONRPCResultEncodable {
    func jsonrpcResultEncode(to encoder: JSONRPCResultEncoder) throws {
        try self.encode(to: encoder)
    }
}

/// The actual JSONRPC Result encoder class.
public class JSONRPCResultEncoder {
    fileprivate var data: String = ""
    
    public init() {}
}

/// A convenience function for creating an encoder, encoding a value, and
/// extracting the resulting data.
public extension JSONRPCResultEncoder {
    static func encode(_ value: JSONRPCResultEncodable) throws -> String {
        let encoder = JSONRPCResultEncoder()
        try value.jsonrpcResultEncode(to: encoder)
        return encoder.data
    }
}

/// The error type.
public extension JSONRPCResultEncoder {
    /// All errors which `JSONRPCResultEncoder` itself can throw.
    enum Error: Swift.Error {
        /// Attempted to encode a type which is `Encodable`, but not `JSONRPCEncodable`. (We
        /// require `JSONRPCEncodable` because `JSONRPCEncoder` doesn't support full keyed
        /// coding functionality.)
        case typeNotConformingToJSONRPCResultEncodable(Encodable.Type)
        
        /// Attempted to encode a type which is not `Encodable`.
        case typeNotConformingToEncodable(Any.Type)
    }
}

/// Methods for decoding various types.
public extension JSONRPCResultEncoder {
    
    func encode(_ value: Bool) throws {
        try encode(value ? 1 as UInt8 : 0 as UInt8)
    }
    
    func encode(_ value: Float) {
        appendBytes(of: CFConvertFloatHostToSwapped(value))
    }
    
    func encode(_ value: Double) {
        appendBytes(of: CFConvertDoubleHostToSwapped(value))
    }
    
    func encode(_ encodable: Encodable) throws {
        switch encodable {
        case let v as Int:
            try encode(Int64(v))
        case let v as UInt:
            try encode(UInt64(v))
        case let v as FixedWidthInteger:
            v.jsonrpcResultEncode(to: self)
            
        case let v as Float:
            encode(v)
        case let v as Double:
            encode(v)
            
        case let v as Bool:
            try encode(v)
            
        case let binary as JSONRPCResultEncodable:
            try binary.jsonrpcEncode(to: self)
            
        default:
            throw Error.typeNotConformingToJSONRPCResultEncodable(type(of: encodable))
        }
    }
}

/// Internal method for encoding raw data.
private extension JSONRPCResultEncoder {
    /// Append the raw bytes of the parameter to the encoder's data. No byte-swapping
    /// or other encoding is done.
    func appendBytes<T>(of: T) {
//        var target = of
//        withUnsafeBytes(of: &target) {
//            data.append(contentsOf: $0)
//        }
    }
}

extension JSONRPCResultEncoder: Encoder {
    public var codingPath: [CodingKey] { return [] }
    
    public var userInfo: [CodingUserInfoKey : Any] { return [:] }
    
    public func container<Key>(keyedBy type: Key.Type) -> KeyedEncodingContainer<Key> where Key : CodingKey {
        return KeyedEncodingContainer(KeyedContainer<Key>(encoder: self))
    }
    
    public func unkeyedContainer() -> UnkeyedEncodingContainer {
        return UnkeyedContainer(encoder: self)
    }
    
    public func singleValueContainer() -> SingleValueEncodingContainer {
        return UnkeyedContainer(encoder: self)
    }
    
    private struct KeyedContainer<Key: CodingKey>: KeyedEncodingContainerProtocol {
        var encoder: JSONRPCResultEncoder
        
        var codingPath: [CodingKey] { return [] }
        
        func encode<T>(_ value: T, forKey key: Key) throws where T : Encodable {
            try encoder.encode(value)
        }
        
        func encodeNil(forKey key: Key) throws {}
        
        func nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type, forKey key: Key) -> KeyedEncodingContainer<NestedKey> where NestedKey : CodingKey {
            return encoder.container(keyedBy: keyType)
        }
        
        func nestedUnkeyedContainer(forKey key: Key) -> UnkeyedEncodingContainer {
            return encoder.unkeyedContainer()
        }
        
        func superEncoder() -> Encoder {
            return encoder
        }
        
        func superEncoder(forKey key: Key) -> Encoder {
            return encoder
        }
    }
    
    private struct UnkeyedContainer: UnkeyedEncodingContainer, SingleValueEncodingContainer {
        var encoder: JSONRPCResultEncoder
        
        var codingPath: [CodingKey] { return [] }
        
        var count: Int { return 0 }
        
        func nestedContainer<NestedKey>(keyedBy keyType: NestedKey.Type) -> KeyedEncodingContainer<NestedKey> where NestedKey : CodingKey {
            return encoder.container(keyedBy: keyType)
        }
        
        func nestedUnkeyedContainer() -> UnkeyedEncodingContainer {
            return self
        }
        
        func superEncoder() -> Encoder {
            return encoder
        }
        
        func encodeNil() throws {}
        
        func encode<T>(_ value: T) throws where T : Encodable {
            try encoder.encode(value)
        }
    }
}

private extension FixedWidthInteger {
    func jsonrpcResultEncode(to encoder: JSONRPCResultEncoder) {
        encoder.appendBytes(of: self.bigEndian)
    }
}
